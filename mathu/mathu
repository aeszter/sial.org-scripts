#!/usr/bin/perl -w

if ($ARGV[0] eq "sum") {
  my $sum;
  while (<STDIN>) {
    chomp;
    $sum += $_;
  }
  print $sum, "\n";
} elsif ($ARGV[0] eq "mean") {
  my @array;
  chomp (@array = <STDIN>);
  print mean(\@array), "\n";
} elsif ($ARGV[0] eq "sdev") {
  my @array;
  chomp (@array = <STDIN>);
  print standard_deviation(\@array, mean(\@array)), "\n";
} elsif ($ARGV[0] eq "pcnt") {
  printf "%.2f%%\n", $ARGV[1] / $ARGV[2] * 100;
} elsif ($ARGV[0] eq "max") {
  my $max;
  while (<STDIN>) {
    chomp;
    $max ||= $_;
    $max = $_ if $_ > $max;
  }
  print $max, "\n";
} elsif ($ARGV[0] eq "min") {
  my $min;
  while (<STDIN>) {
    chomp;
    $min ||= $_;
    $min = $_ if $_ < $min;
  }
  print $min, "\n";
}

# $mean = mean(\@array) computes the mean of an array of numbers.
#
sub mean {
    my ($arrayref) = shift;
    my $result;
    for (@$arrayref) { $result += $_ }
    return $result / @$arrayref;
}

# $sd = standard_deviation_data(\@array) computes the standard
# deviation of an array of numbers.
#
sub standard_deviation {
    my $arrayref = shift;
    my $mean     = shift;

    # JAM there is a faster (6%) algorithm in Mastering Algorithms
    # with perl, but it chokes on certain directories where the
    # epoch times are all within a second or two of one another
    return sqrt(mean([map (($_ - $mean)**2, @$arrayref)]));
}
