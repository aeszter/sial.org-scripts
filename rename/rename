#!/usr/bin/perl -w
#
# $Id$
#
# Copyright (c) 2000, Jeremy A. Mates.  This script is free software;
# you can redistribute it and/or modify it under the same terms as
# Perl itself.
#
# Run perldoc on this file for additional documentation.
#
######################################################################
#
# REQUIREMENTS

require 5.005;

use strict;

######################################################################
#
# MODULES

use Carp;			# better error reporting
use Getopt::Std;		# command line option processing

use File::Copy;			# if want to copy instead of rename

######################################################################
#
# VARIABLES

my $VERSION; ($VERSION = '$Revision$ ') =~ s/[^0-9.]//g;

my (%opts, $op, $fn);

######################################################################
#
# MAIN

# parse command-line options
getopts('h?cifvp', \%opts);

help() if exists $opts{'h'} or exists $opts{'?'};

# choose which function to use (copy vs. rename) depending on argument
$fn = $opts{'c'} || $0 eq "copy" ? "copy" : "rename";

$op = shift;

# read from STDIN if no args left
chomp(@ARGV = <STDIN>) unless @ARGV;

# and flag the help text if nothing from STDIN
help() unless @ARGV;

# loop over the files
for(@ARGV) {
    # record what the file was called
    my $was = $_;

    # evaluate the expression passed on the command line,
    # operating on $_ (by default)
    eval $op;

    # keel over if something went wrong with the evaluation...
    die $@ if $@;

    # skip out early if the filename didn't change
    next if $was eq $_;

    # if required, print out what we intend to do
    print $fn, ' ', $was, ' ', $_, "\n" 
	if $opts{'v'} || $opts{'i'} || $opts{'p'};

    # skip out early if we're in the "preview" mode
    next if $opts{'p'};

    # check whether we should drop into interactive mode
    # when a conflicting file exists
    if($opts{'i'} || (-e && ! $opts{'f'})) {
        print $opts{'i'} ? "Confirm? " : "$_ exists.  Overwrite? ";
        next unless <STDIN> =~ /^[Yy]/;
    }
    # with error checking, actually attempt the rename or
    # copy.
    unless (eval "$fn(\$was, \$_)") {
        warn "\U$fn\E ERROR $was -> $_ - $!\n";
        next;
    }
}

exit;

######################################################################
#
# SUBROUTINES

# a generic help blarb
sub help {
    print <<"HELP";
Usage: $0 [opts] expression [file1 file2 .. fileN]

A powerful file renamer in perl.

Options for version $VERSION:
  -h/-?  Display this message

  -c     copy file(s) instead of rename
  -i     interactive, prompt if necessary
  -f     force (over-rides -i, it would seem...)
  -v     be verbose
  -p     preview mode (show changes only)

Run perldoc on this script for additional documentation.

HELP
    exit;
}

######################################################################
#
# DOCUMENTATION

=head1 NAME

rename.pl - a spiffy file renamer.

=head1 SYNOPSIS

=head1 DESCRIPTION

A powerful file renamer that uses perl expressions to rename files.

This is a hacked up version of Larry Wall's original rename script
distributed with perl, improved by Daniel V. Klien (copy option,
interactive mode), and then polished into this form by Jeremy Mates
(preview mode, comments in source).

=head1 USAGE

  $ rename.pl [options] expression [file1 file2 .. fileN]

If no files are mentioned on the command line, the script will attempt
to read them from STDIN, allowing for things like:

  $ find . -name "*.asp" | rename.pl 's/asp$/cleopatra_killer/'

Options are detailed below.

For more examples, consult the Perl Cookbook, which is probably
reproducing some portion of the manual.

=head1 OPTIONS

rename.pl currently supports the following options:

=over 4

=item B<-h> / B<-?>

Display a brief help blarb.

=item B<-c>

Copy files instead of renaming them.

=item B<-i>

Interactive mode: prompt if necessary.

=item B<-f>

Force.  Overrides the interactive mode.

=item B<-v>

Be verbose about the whole process.

=item B<-p>

Enable preview mode, no changes will be made to disk.

=back

=head1 BUGS

Newer versions of this script may be available from:
http://www.sial.org/code/perl/

If not, or the bug is in the latest version, send the bug report to:
jmates@sial.org

=head1 SEE ALSO

perl(1), L<Carp>, L<Getopt::Std>

=head1 AUTHOR

Jeremy A. Mates, jmates@sial.org

Who improved on earlier work done by Daniel V. Klien and Larry Wall.

=head1 COPYRIGHT

Copyright (c) 2000, Jeremy A. Mates.  This script is free software;
you can redistribute it and/or modify it under the same terms as Perl
itself.

=head1 VERSION

$Id$

=cut
