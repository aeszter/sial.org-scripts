#!/usr/bin/perl -wT
#
# $Id$
#
# Copyright (c) 2002, Jeremy A. Mates.  This script is free software;
# you can redistribute it and/or modify it under the same terms as
# Perl itself.
#
# Run perldoc(1) on this file for additional documentation.
#
######################################################################
#
# REQUIREMENTS

require 5;

use strict;

# clean up env for taint mode ("perldoc perlsec" for more information)
sub BEGIN {
  delete @ENV{qw(IFS CDPATH ENV BASH_ENV)};
  $ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin';
}

######################################################################
#
# MODULES

use Carp;         # better error reporting
use Getopt::Std;  # command line option processing

use Digest::MD5 qw(md5);  # Perl interface to the MD5 Algorithm

use Data::Dumper;         # DBG

######################################################################
#
# VARIABLES

my $VERSION;
($VERSION = '$Revision$ ') =~ s/[^0-9.]//g;

my (%opts, $data, @targets, $comment, $keyopts);

######################################################################
#
# MAIN

# parse command-line options
getopts('h?f:C:o:O:t', \%opts);

# various key-munging options
$comment = $opts{'C'} if exists $opts{'C'};

if (exists $opts{'o'}) {
  $keyopts->{'required'} = parse_authkey_options($opts{'o'});
}

if (exists $opts{'O'}) {
  $keyopts->{'exclusive'} = parse_authkey_options($opts{'O'});
}

help() if exists $opts{'h'} or exists $opts{'?'};

# read target host(s) in
push @targets, $opts{'t'} if exists $opts{'t'};
if (exists $opts{'f'}) {
  unless ($opts{'f'} eq "-") {
    open STDIN, "< $opts{'f'}"
     or remark('alert', "could not open $opts{'f'}: $!")
     and die;
  }
  while (<STDIN>) {
    next if m/^#/ or m/^\s*/;
    chomp;

    s/^\s+//;
    s/\s+$//;

    push @targets, $_;
  }
}

# TODO: validate incoming targets?

# rest of argv keyfiles, load 'em up
for (@ARGV) {

  open KEYFILE, $_
   or remark('warning', "problem reading $_: $!")
   and next;

  while (<KEYFILE>) {

    # see sshd(8) for expected format of auth_key_file
    next if m/^#/ or m/^\s*$/;
    chomp;

    my $values = parse_authkey($_);

    next unless defined $values;

    if (exists $data->{$values->{'hash'}}) {
      remark('warning', "skipping duplicate key (hash:",
        $values->{'hash'}, ") at $_ line $.");
      next;
    }

    # munge keys as called for
    $values->{'comment'} = $comment if defined $comment;

    if (exists $keyopts->{'exclusive'}) {
      $values->{'options'} = $keyopts->{'exclusive'};

    } elsif (exists $keyopts->{'required'}) {
      %{$values->{'options'}} =
       (%{$values->{'options'}}, %{$keyopts->{'required'}});
    }

    $data->{$values->{'hash'}} = $values;
  }

  close KEYFILE;
}

print Dumper $data;

exit;

######################################################################
#
# SUBROUTINES

# takes scalar containing key, tries to return hash reference with
# various bits of info expanded out
sub parse_authkey {
  my $authkey = shift;

  my (%values, @options);

  # TODO: improve parser to get around boundary cases!
  # e.g.: command="mumble ssh-rsa AAAA.... zot" ssh-rsa AAAA....
  # or even: ssh-rsa  AAAA...

  # try to pull apart key so we can do a checksum on the
  # important bits (i.e. not the optional option and comment fields)
  my @elements = split /\s/, $authkey;
  for my $i (0 .. $#elements) {

    if (  $elements[$i] =~ m/^ssh-(?:rsa|dss)$/
      and $elements[$i + 1] =~ m/^AAAA/) {

      $values{'type'} = ($elements[$i] =~ m/rsa$/) ? 'rsa' : 'dsa';
      $values{'goodbit'} = join " ", @elements[$i .. $i + 1];
      $values{'comment'} = join " ", @elements[$i + 2 .. $#elements];

      last;

      } elsif ($elements[$i] =~ m/^\d+$/
      and $elements[$i + 1] =~ m/^\d+$/
      and $elements[$i + 2] =~ m/^\d+$/) {

      $values{'type'}    = 'rsa1';
      $values{'goodbit'} = join " ", @elements[$i .. $i + 2];
      $values{'comment'} = join " ", @elements[$i + 3 .. $#elements];

      last;
    }

    push @options, $elements[$i];
  }

  unless (exists $values{'goodbit'}) {
    remark('notice', "could not parse key from: $authkey");
    return;
  }

  $values{'options'} = parse_authkey_options("@options");

  $values{'hash'} = sprintf "%08x", unpack "N", md5($values{'goodbit'});
  $values{'key'}  = $authkey;

  return \%values;
}

# takes scalar containing auth_key_file options
# returns hash reference
#
# TODO: fixup to handle 'mumble="asdf, zot",foo' issues
sub parse_authkey_options {
  my $options = shift;
  my $ak_opts;

  for (split /,/, $options) {
    my ($k, $v) = split /=/;
    $ak_opts->{$k} = $v;
  }

  return $ak_opts;
}

# takes hash ref, returns scalar format of options
sub authkey_options2str {
  return join ",", map { $_[0]->{$_} ? $_ . '=' . $_[0]->{$_} : $_ }
   sort keys %{$_[0]};
}

# generic log handler
sub remark {
  my ($facility, $priority, $message);
  $facility = 'user';

  if (@_ > 1) {
    $priority = shift;
    $message  = "@_";
  } else {
    $priority = 'info';
    $message  = "@_";
  }

  return 1 if exists $opts{'q'} and $priority eq 'info';

  if (exists $opts{'l'}) {
    if ($opts{'l'} eq "syslog") {
      openlog($0, 'cons', $facility);
      syslog($priority, $message);
      closelog();

    } elsif ($opts{'l'} eq "logger") {
      system "logger", '-p', $facility . '.' . $priority, '-t', $0, $message;

    } else {
      die "alert: unknown log handler: ", $opts{'l'};
    }

  } else {
    warn $priority, ": ", $message, "\n";
  }

  return 1;
}

# a generic help blarb
sub help {
  print <<"HELP";
Usage: $0 [opts] keyfile1 [keyfile2 .. keyfileN]

Manages OpenSSH authorized key files.

Options for version $VERSION:
  -h/-?  Display this message

  -t hh  Target host tt.
  -f ff  Read target host(s) from file ff; - for STDIN.

  -C cc  Set comment cc on keys.
  
  -o aa  Require options aa to be set.
  -O bb  Force only options bb to be set.

Run perldoc(1) on this script for additional documentation.

HELP
  exit;
}

######################################################################
#
# DOCUMENTATION

=head1 NAME

authkey-tool.pl - manages OpenSSH authorized key files

=head1 SYNOPSIS

Quick usage notes here.

=head1 DESCRIPTION

=head2 Overview

Loads, modifies, and distributes OpenSSH public authorized keys to
hosts with the backend manage-authkeys.pl script.

=head2 Normal Usage

  $ authkey-tool.pl [options] keyfile1 [keyfile2 .. keyfileN]

See L<"OPTIONS"> for details on the command line switches supported.

=head1 OPTIONS

This script currently supports the following command line switches:

=over 4

=item B<-h>, B<-?>

Prints a brief usage note about the script.

=item B<-t> I<host specification>

Specify a target host to manage keys with.

=item B<-f> I<filepath>

Read target host(s) from specified file.  Setting the file to C<->
will read from STDIN.  Lines beginning with # will be ignored; leading
and trailing whitespace will be deleted, and empty lines skipped.

Hosts should be hostnames or IP addresses the computer running the
script can resolve.

=item B<-C> I<comment>

Set the comment field on all keys dealt with to I<comment>.

=item B<-o> I<options>

Ensure that the options specified are set on all keys.  This allows
variable C<from> and C<command> options to be set elsewhere, but to
have this utility add the usual command key restrictions:

  -o no-X11-forwarding,no-agent-forwarding,no-port-forwarding,no-pty

=item B<-O> I<options>

Replace any existing options with those specified.

=back

=head1 EXAMPLES

Additional examples/helpfull hints expanding on SYNOPSIS.

=head1 ENVIRONMENT

Any special environement details or warnings?

=head1 FILES

Any important files this script relies on?

=head1 BUGS

=head2 Reporting Bugs

Newer versions of this script may be available from:

http://www.sial.org/code/perl/

If the bug is in the latest version, send a report to the author.
Patches that fix problems or add new features are welcome.

=head2 Known Issues

No known bugs.

=head1 SEE ALSO

perl(1)

=head1 AUTHOR

Jeremy A. Mates, http://www.sial.org/contact/

=head1 COPYRIGHT

Copyright (c) 2002, Jeremy A. Mates.  This script is free software;
you can redistribute it and/or modify it under the same terms as Perl
itself.

=head1 VERSION

  $Id$

=cut
