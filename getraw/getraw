#!/usr/bin/perl -w
#
# $Id$
#
# The author disclaims all copyrights and releases this script into the
# public domain.
#
# Means of prompting where human interaction required.

require 5;
use strict;

use Term::ReadKey;

my $VERSION;
($VERSION = '$Revision$ ') =~ s/[^0-9.]//g;

my $spec = 'Yy:+ Nn:- *:';

my $prompt;
$prompt->{first} = '';
$prompt->{first} = $ENV{GETRAW1} if exists $ENV{GETRAW1};
$prompt->{annoy} = 'Are you really sure? %s';
$prompt->{annoy} = $ENV{GETRAW2} if exists $ENV{GETRAW2};

use Getopt::Std;
my %opts;
getopts('h?o:A:t:ar', \%opts);
help() if exists $opts{'h'} or exists $opts{'?'};

if (exists $opts{o}) {
  parse_spec($opts{o});
} else {
  parse_spec($spec);
}

$prompt->{first} = "@ARGV"  if @ARGV;
$prompt->{annoy} = $opts{A} if exists $opts{A};

my $key = get_key();

######################################################################
#
# SUBROUTINES

sub get_key {
  ReadMode 4;
  my $first;

  # TODO add timeout support via -t timeout option
  do {
    $first = ReadKey(-1);
  } until defined $first;

  if (exists $opts{r}) {

    # TODO if print, need to send to tty to avoid polluting regular output?
    #    print $first;
    my $ret;

    # wait for user to hit \r hit, but still take first key they type
    do {
      do {
        $ret = ReadKey(-1);
      } until defined $ret;
    } until $ret eq "\n";
  }
  ReadMode 0;

  return $first;
}

sub parse_spec {
  my $string = shift;

  for (split /(?<!\\)[ ,]+/, $string) {
    my ($keys, $status) = /(.+?):(.)?$/;
    $status ||= '';

    # unescape backwhacked things (\r, etc.)
    $keys =~ s/(\\.)/qq!"$1"!/eeg;

    # DBG    print "k $keys   s $status\n";
  }
}

# a generic help blarb
sub help {
  print <<"HELP";
Usage: $0 [opts] [prompt string]

Means to prompt for human interaction.

Options for version $VERSION:
  -h/-?  Display this message

  -o fmt Key mapping specification

  -a     Annoy with additional "Are you sure?"

  -r     Require return key (default: on keystroke)

Run perldoc(1) on this script for additional documentation.

HELP
  exit;
}

=head1 NAME

getraw - means to prompt for human interaction

=head1 SYNOPSIS

  $ getraw

=head1 DESCRIPTION

=head2 Overview

This script is intended to provide a means for other scripts to interact
with a human, for example to choose from a list.

=head2 Normal Usage

  $ getraw [options] [prompt message]

See L<"OPTIONS"> for details on the command line switches supported.

=head1 OPTIONS

This script currently supports the following command line switches:

=over 4

=item B<-h>, B<-?>

Prints a brief usage note.

=back

=head1 BUGS

=head2 Reporting Bugs

Newer versions of this script may be available from:

http://www.sial.org/code/perl/

If the bug is in the latest version, send a report to the author.
Patches that fix problems or add new features are welcome.

=head2 Known Issues

No known bugs.

=head1 TODO

Means to pass -wyY -Wn format to prompt somehow for indication of what
keys the program wants?

Way to return arbitrary exit code, to support more than just positive or
negative exits?

=head1 SEE ALSO

perl(1)

=head1 AUTHOR

Jeremy Mates, http://www.sial.org/contact/

=head1 COPYRIGHT

The author disclaims all copyrights and releases this script into the
public domain.

=head1 HISTORY

Written based on talk Damian Conway gave about his own ~/bin/getraw
program.  This version likely is substantially different.

=head1 VERSION

  $Id$

=cut

