#!/usr/bin/perl -w
#
# $Id$
#
# The author disclaims all copyrights and releases this script into the
# public domain.
#
# Means of prompting where human interaction required.

require 5;
use strict;

use Term::ReadKey;

my $VERSION;
($VERSION = '$Revision$ ') =~ s/[^0-9.]//g;

my $default_spec = 'Yy:+ Nn:- *:';
my $spec;

# "true" is 0 for shell exits, 1 for "false"
my $status_map = {'+' => 0, '-' => 1};

# by default wait forever
my $timeout = -1;

use Getopt::Std;
my %opts;
getopts('h?o:t:r', \%opts);
help() if exists $opts{'h'} or exists $opts{'?'};

$spec = parse_spec(exists $opts{o} ? $opts{o} : $default_spec);

# TODO only allow non--1 timeouts if non-null default action exists
if (exists $opts{t} and exists $spec->{default} and $spec->{default} =~ /^\d+$/)
{
  $timeout = duration2seconds($opts{t});
}

while (1) {
  my $key = get_key();
  if (exists $spec->{keys}->{$key} and $spec->{keys}->{$key} =~ /^\d+$/) {
    exit $spec->{keys}->{$key};
  } elsif (exists $spec->{default} and $spec->{default} =~ /^\d+$/) {
    exit $spec->{default};
  }
}

######################################################################
#
# SUBROUTINES

sub get_key {
  ReadMode 4;
  my $first;

  do {

    # TODO way to spot timeouts and break the loop?
    $first = ReadKey($timeout);
  } until defined $first;

  if (exists $opts{r}) {

    # TODO if print, need to send to tty to avoid polluting regular output?
    #    print $first;
    my $ret;

    # wait for user to hit \r hit, but still take first key they type
    do {
      do {
        $ret = ReadKey($timeout);
      } until defined $ret;
    } until $ret eq "\n";
  }
  ReadMode 0;

  return $first;
}

sub parse_spec {
  my $string = shift;
  my $spec;

  for (reverse split /(?<!\\)[ ,]+/, $string) {
    my ($keys, $status) = /(.+?):(.)?$/;
    $status ||= '';  # "do nothing" status, no return code

    $spec->{human}->{$status} .= $keys;

    if (exists $status_map->{$status}) {
      $status = $status_map->{$status};
    }

    # TODO warn about not getting numeric exit status
    if ($status ne '' and $status !~ /^\d+$/) {
      $status = 0;
    }

    # unescaped * means "any key"
    if ($keys =~ s/(?<!\\)\*//) {
      $spec->{default} = $status;
    }

    # unescape backwhacked things (\r, etc.)
    $keys =~ s/(\\.)/qq!"$1"!/eeg;

    # quick lookup map for key typed
    for (split //, $keys) {
      $spec->{keys}->{$_} = $status;
    }
  }

  # DBG
#  use Data::Dumper;
#  print Dumper $spec;

  return $spec;
}

sub duration2seconds {
  my $tmpdur = shift;
  my $timeout;

  # how to convert short human durations into seconds
  my %factor = (
    'w' => 604800,
    'd' => 86400,
    'h' => 3600,
    'm' => 60,
    's' => 1,
  );

  # assume raw seconds for plain number
  if ($tmpdur =~ m/^\d+$/) {
    $timeout = $tmpdur;

  } elsif ($tmpdur =~ m/^[wdhms\d\s]+$/) {

    # match "2m 5s" style input and convert to seconds
    while ($tmpdur =~ m/(\d+)\s*([wdhms])/g) {
      $timeout += $1 * $factor{$2};
    }
  } else {
    die "Error: unknown characters in duration.\n";
  }

  unless (defined $timeout and $timeout =~ m/^\d+$/) {
    die "Error: unable to parse duration.\n";
  }

  return $timeout;
}

# a generic help blarb
sub help {
  print <<"HELP";
Usage: $0 [opts]

Means to prompt for human interaction.

Options for version $VERSION:
  -h/-?  Display this message

  -o ss  Key mapping specification

  -r     Require return key (default: on keystroke)
  -t dd  Timeout to default after dd seconds

Run perldoc(1) on this script for additional documentation.

HELP
  exit;
}

=head1 NAME

getraw - means to prompt for human interaction

=head1 SYNOPSIS

  $ getraw

=head1 DESCRIPTION

=head2 Overview

This script is intended to provide a means for other scripts to interact
with a human, for example to choose from a list.

=head2 Normal Usage

  $ getraw [options]

See L<"OPTIONS"> for details on the command line switches supported.

=head1 OPTIONS

This script currently supports the following command line switches:

=over 4

=item B<-h>, B<-?>

Prints a brief usage note.

=back

=head1 BUGS

=head2 Reporting Bugs

Newer versions of this script may be available from:

http://www.sial.org/code/perl/

If the bug is in the latest version, send a report to the author.
Patches that fix problems or add new features are welcome.

=head2 Known Issues

The -t timeout option does not really work, as I currently know no
way to detect that a Term::ReadKey timeout has occured soas to break
the read key loop.

=head1 TODO

Write own alarm signal handler to replace Term::ReadKey one.

=head1 SEE ALSO

perl(1)

=head1 AUTHOR

Jeremy Mates, http://www.sial.org/contact/

=head1 COPYRIGHT

The author disclaims all copyrights and releases this script into the
public domain.

=head1 HISTORY

Written based on talk Damian Conway gave about his own ~/bin/getraw
program.  This version likely is substantially different.

=head1 VERSION

  $Id$

=cut

