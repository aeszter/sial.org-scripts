#!/usr/bin/perl -w
#
# $Id$
#
# Copyright (c) 2001, Jeremy A. Mates.  This script is free software;
# you can redistribute it and/or modify it under the same terms as
# Perl itself.
#
# Run perldoc(1) on this file for additional documentation.
#
######################################################################
#
# REQUIREMENTS

require 5.005;

use strict;

######################################################################
#
# MODULES

use Carp;			# better error reporting
use Getopt::Std;		# command line option processing

######################################################################
#
# VARIABLES

my $VERSION;
($VERSION = '$Revision$ ') =~ s/[^0-9.]//g;

my (%opts, $zero);

######################################################################
#
# MAIN

# parse command-line options
getopts('h?0', \%opts);

help() if exists $opts{'h'} or exists $opts{'?'};

$zero = 0 if exists $opts{'0'};

# mangle all input
while (<>) {
    s/([d-]?)([r-][w-][x-])([r-][w-][x-])([r-][w-][x-])/
	$zero.r2m($2).r2m($3).r2m($4)/ex;
    print;
}

exit;

######################################################################
#
# SUBROUTINES

# converts rwx blocks into octal equivalent
sub r2m {
    my $str = shift;

    $str =~ tr/\-a-z/01/;	# make it a binary number

    # convert from binary into an octal digit
    return oct unpack "N", pack "B32", substr "0" x 32 . $str, -32;
}

# a generic help blarb
sub help {
    print <<"HELP";
Usage: $0 [opts] [file1 .. fileN]

Converts rwx-style permission listings into octal format.

Options for version $VERSION:
  -h/-?  Display this message

  -0     Include leading 0 in output, if required.

Run perldoc(1) on this script for additional documentation.

HELP
    exit;
}

######################################################################
#
# DOCUMENTATION

=head1 NAME

rwxconv.pl - converts rwx-style permission listings into octal format.

=head1 SYNOPSIS

To filter the output of a long directory listing:

  $ ls -al | rwxconv.pl

=head1 DESCRIPTION

=head2 Overview

This script accepts input, searches for -rwxr-xr-x style elements, and
converts said strings into octal format, e.g. 0755.

Generally, this script will be used to feed data into other programs
that operate on octal mode data, where the input is only available in
the rwx-form.

=head2 Normal Usage

  $ rwxconv.pl [options] [file1 .. fileN]

This script will read from STDIN if no files are mentioned on the
command line.

Output will be done to STDOUT.

See L<"OPTIONS"> for details on the command line switches supported.

=head1 OPTIONS

This script currently supports the following command line switches:

=over 4

=item B<-h>, B<-?>

Prints a brief usage note about the script.

=item B<-0>

Includes a leading 0 to mode output, if required.  Default is to print
modes like 644; this option would change that to 0644.

=back

=head1 EXAMPLES

Anywhere rwx-style output is produced, this script can convert:

  $ tar tvf foo.tar | rwxconv.pl

=head1 BUGS

=head2 Reporting Bugs

Newer versions of this script may be available from:

http://www.sial.org/code/perl/

If the bug is in the latest version, send a report to the author.
Patches that fix problems or add new features are welcome.

=head2 Known Issues

No known bugs.

=head1 SEE ALSO

File::Mode, perl(1)

=head1 AUTHOR

Jeremy A. Mates, http://www.sial.org/contact/

=head1 COPYRIGHT

Copyright (c) 2001, Jeremy A. Mates.  This script is free software;
you can redistribute it and/or modify it under the same terms as Perl
itself.

=head1 HISTORY

Based heavily on code found in the File::Mode module on CPAN by Idan
Robbins, which did not do the filtering aspect well.

=head1 VERSION

  $Id$

=cut
