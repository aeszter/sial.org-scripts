#!/usr/bin/perl
#
# $Id$
# By Jeremy Mates <mailto:jmates@sial.org>
#
# Removes duplicate files.  Perl only implementation.
#
# Distributed under the Artistic License:
# http://www.sial.org/artistic_license.txt
#
######################################################################
#
# MODULES

use Carp;
use Digest::MD5;
use File::Spec;
use Getopt::Std;

use strict;
use vars qw:$VERSION:;

######################################################################
#
# CONSTANTS

($VERSION = '$Revision$ ') =~ s/[^0-9.]//g;

my (%opts, $verbose, %check);

my $dig = new Digest::MD5; # we reset this for each file

######################################################################
#
# MAIN

# parse command-line options
getopts('h?v', \%opts);

help() if exists($opts{'h'}) || exists($opts{'?'});

$verbose = 1 if exists $opts{'v'};

# read from STDIN if no args left
chomp(@ARGV = <STDIN>) unless @ARGV;

# and flag the help text if nothing from STDIN
help() unless @ARGV;

# loop over arguments which presumably are a bunch of directories
foreach ( @ARGV ) {
    if (-d) {
	unless (opendir (DIR, $_)) {
	    warn 'Problem reading ', $_, ': ', $!, "\n";
	    next;
	}

#	my $parent = $_;

	# loop over sorted contents of directory, skipping . and .. specials
	foreach (sort (readdir (DIR))) {
	    next if /^\.{1,2}$/;
	    next if -l; # skip links.  Links bad. :)

#	    my $loc = File::spec->catfile($parent, $_);

	    # only deal with non-linked files when doing sums
	    if (-f) {
		# obtain MD5 sum on this file
		$dig->new(); # reset checksum object

		open (FILE, $_);
		$dig->addfile(*FILE);
		my $sum = $dig->hexdigest;
		close (FILE);

		# either add new checksum to hash, or delete the duplicate file
		unless (exists $check{$sum}) {
		    $check{$sum} = $_;
		} else {
		    # need an interactive mode, or at least a report mode!!
		    warn "unlink $_" if $verbose;
		    unlink $_ || warn "Problem unlinking $_ (dup of $check{$sum}): $!\n";
		}
	    # recurse into directories
	    } elsif (-d) {
#		subdir(File::Spec->catdir($parent, $_));
	    }
	}
    }
}

######################################################################
#
# SUBROUTINES

sub subdir {
    
}

# a generic help blarb
sub help {
    print <<"HELP";
$0 v.$VERSION
Usage: $0 [options]

Removes duplicate files based on checksum comparison.

Options:
  -h/-?  Display this message

HELP
    exit;
}
