#!/usr/bin/perl -w
#
# $Id$
#
# The author disclaims all copyrights and releases this script into the
# public domain.
#
# Checks whether domain(s) listed on command line (or failing that
# STDIN) are wildcard domains.

use strict;

# how to match Top Level Domains (TLD)
my $tld_re = qr/( \.\w+ )/x;

# domain portion option so can handle just TLD input
my $domain_re = qr/( (?:[\w-]+)? $tld_re )/x;

use Net::DNS;
my $dns = Net::DNS::Resolver->new;
$dns->defnames(0);  # do not search default domain

chomp(@ARGV = <STDIN>) unless @ARGV;

for my $input (@ARGV) {
  my ($domain, $tld) = $input =~ / $domain_re \W* $ /x;

  # real TLD should have SOA records
  unless ($dns->query($tld, 'SOA')) {
    warn "notice: skipping as no SOA record: $tld\n";
    next;
  }

  my $wildcard = '*' . $tld;
  my @wc_ip    = get_ip_list($dns, $wildcard);

  # no wildcards for this TLD
  next unless @wc_ip;

  if ($domain eq $tld) {
    print "tld $tld wildcard @wc_ip\n";
  } else {
    my @dom_ip = get_ip_list($dns, $domain);
    die "error: no addresses for domain $domain\n" unless @dom_ip;

    my (%union, %isect);
    for my $ip (@wc_ip, @dom_ip) { $union{$ip}++ && $isect{$ip}++ }

    if (keys %isect) {
      print "domain $domain wildcard ", join (" ", keys %isect), "\n";
    }
  }
}

# Accepts Net::DNS::Resolver object and item to lookup for A records,
# returns undef or list of ip addresses
sub get_ip_list {
  my $dns  = shift;
  my $what = shift;

  my $query = $dns->query($what, 'A');
  return unless $query;

  my @ips;

  for my $rr ($query->answer) {
    push @ips, $rr->address if $rr->type eq 'A';
  }

  return @ips;
}
