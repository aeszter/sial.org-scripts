#!/usr/bin/perl -w
#
# $Id$
#
# Copyright (c) 2001, Jeremy A. Mates.  This script is free software;
# you can redistribute it and/or modify it under the same terms as
# Perl itself.
#
# Run perldoc(1) on this file for additional documentation.
#
######################################################################
#
# REQUIREMENTS

require 5;

use strict;

######################################################################
#
# MODULES

use Carp;			# better error reporting
use Getopt::Std;		# command line option processing

use File::Tail;			# tail -f on steroids

######################################################################
#
# VARIABLES

my $VERSION;
($VERSION = '$Revision$ ') =~ s/[^0-9.]//g;

my (%opts, $filename, $file);

# various File::Tail object preferences.  listen much faster than default
# to emulate tail(1) at expense of more busy wait.

my $maxinterval = 2;
my $interval = 1;
my $adjustafter = 1;
my $tail = 0;
my $reset_tail = -1;

# default to just printing input
my $expression = "print";

######################################################################
#
# MAIN

# parse command-line options
getopts('h?', \%opts);

help() if exists $opts{'h'} or exists $opts{'?'} or not @ARGV;

# filename to tail on and perl expression to apply to each line
$filename = shift;
$expression = "@ARGV" if @ARGV;

$file = File::Tail->new(
			name => $filename, 
			maxinterval => $maxinterval,
			interval => $interval,
			adjustafter => $adjustafter,
			tail => $tail,
			reset_tail => $reset_tail,
			);

# loop forever on file; apply supplied expression to each line
while (defined($_ = $file->read)) {
    eval $expression;

    die $@ if $@;
}

exit;

######################################################################
#
# SUBROUTINES

# a generic help blarb
sub help {
    print <<"HELP";
Usage: $0 [opts] file [expression]

tails a file and applies perl expression to each line

Options for version $VERSION:
  -h/-?  Display this message

Run perldoc(1) on this script for additional documentation.

HELP
    exit;
}

######################################################################
#
# DOCUMENTATION

=head1 NAME

ptail.pl - follows a file and applies a perl expression to each line

=head1 SYNOPSIS

Follow a logfile, and print any lines mentioning ipmon:

  $ ptail.pl /var/log/messages print if m/ipmon/

=head1 DESCRIPTION

=head2 Overview

This script is the functional equivalent of the tail(1) utility
running in follow mode, with the additional ability to apply an
arbitrary perl expression to each line seen in the file being tracked.

The primary use seen for this script is to extract out and manipulate
specific lines of interest from a busy logfile.

=head2 Normal Usage

  $ ptail.pl [options] file [expression]

See L<"OPTIONS"> for details on the command line switches supported.

The file to watch is required, and the expression defaults to "print"
to emulate the behaviour of a tail -f.  The expression is built from
any number of arguments following the file, for greater flexibility.

=head1 OPTIONS

This script currently supports the following command line switches:

=over 4

=item B<-h>, B<-?>

Prints a brief usage note about the script.

=back

=head1 EXAMPLES

None yet.

=head1 BUGS

=head2 Reporting Bugs

Newer versions of this script may be available from:

http://www.sial.org/code/perl/

If the bug is in the latest version, send a report to the author.
Patches that fix problems or add new features are welcome.

=head2 Known Issues

No known bugs.

=head1 SEE ALSO

File::Tail, perl(1)

=head1 AUTHOR

Jeremy A. Mates, http://www.sial.org/contact/

=head1 COPYRIGHT

Copyright (c) 2001, Jeremy A. Mates.  This script is free software;
you can redistribute it and/or modify it under the same terms as Perl
itself.

=head1 VERSION

  $Id$

=cut
