#!/usr/bin/perl -w
#
# $Id$
#
# The author disclaims all copyrights and releases this script into the
# public domain.
#
# Reformats .ini style preference files in format supported by the
# Config::Tiny perl module.
#
# TODO options to customize output (blank line handling, comment string,
# indents, sorting).
#
# TODO means to avoid autoformat() of commented out blocks of code,
# which then become very hard to untidy

use strict;

use Text::Reform qw(form);
use Text::Autoformat qw(autoformat);

my $default        = 1;
my $section_indent = '  ';

my $comment_char_re = qr/[#;]/;
my $comment_str     = '# ';

my @lines;

my $previous_type = '';

while (<>) {
  s/^\s+//;
  s/\s+$//;

  my %data;

  if (m/^ \[ ([^\]]+) \] $/x) {
    # no indent on any leading defs, apply section indent otherwise
    #my $indent = $default ? '' : $section_indent;
    #print cleanup_chunk({ indent => $indent }, \@lines);
    #@lines = ();

    $data{type}  = 'section';
    $data{lines} = [$1];

    if ( $previous_type eq $data{type} ) {
      # TODO error if empty configuration block?
    }

    # disable as in a block now
    $default = 0;
  } elsif (m/^$/x) {
    $data{type} = 'blank';

    if ( $previous_type eq $data{type} ) {
      $lines[-1]->{count}++;
      next;
    } else {
      $data{count} = 1;
    }
  } elsif (m/^ $comment_char_re (.*) $/x) {
    my $line = $1 || '';

    $line =~ s/^\s+//;

    $data{type}   = 'comment';
    $data{indent} = $default ? '' : $section_indent;

    if ( $previous_type eq $data{type} ) {
      push @{ $lines[-1]->{lines} }, $line;
      next;
    } else {
      $data{lines} = [$line];
    }
  } elsif (m/=/) {
    $data{type}   = 'statement';
    $data{indent} = $default ? '' : $section_indent;

    my ( $key, $value ) = split /\s*=\s*/, $_, 2;

    if ( $previous_type eq $data{type} ) {
      push @{ $lines[-1]->{lines} }, { key => $key, value => $value };
      $lines[-1]->{keylength} = length $key
       if length $key > $lines[-1]->{keylength};
      next;
    } else {
      $data{lines} = [ { key => $key, value => $value } ];
      $data{keylength} = length $key;
    }
  } else {
    die "wtf";
  }

  push @lines, \%data;
  $previous_type = $data{type};
}

for my $i ( 0 .. $#lines ) {
  my $entry  = $lines[$i];
  my $indent = $entry->{indent} || '';

  if ( $entry->{type} eq 'section' ) {
    print "[$entry->{lines}->[0]]\n";
  } elsif ( $entry->{type} eq 'comment' ) {

    # no indent pre-section comments
    if ( $i != $#lines and $lines[ $i + 1 ]->{type} eq 'section' ) {
      $indent = '';
    }

    my $comment = $indent . $comment_str . join "\n$indent$comment_str",
     @{ $entry->{lines} };
    print autoformat $comment, { all => 1 };

  } elsif ( $entry->{type} eq 'blank' ) {
    # gobble blank line runs by default
    print "\n" unless $i == $#lines;

  } elsif ( $entry->{type} eq 'statement' ) {
    for my $statement ( sort { $a->{key} cmp $b->{key} } @{ $entry->{lines} } )
    {
      print $indent, $statement->{key},
       ' ' x ( 1 + $entry->{keylength} - length $statement->{key} ), '= ',
       $statement->{value}, "\n";
    }
  }
}
