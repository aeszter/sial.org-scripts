#!/usr/bin/perl -w
#
# $Id$
#
# The author disclaims all copyrights and releases this script into the
# public domain.
#
# Reformats .ini style preference files in format supported by the
# Config::Tiny perl module.
#
# TODO options to customize output (blank line handling, comment string,
# indents, sorting).

use strict;

use Text::Autoformat qw(autoformat);

# how to match comments
my $comment_char_re = qr/[#;]/;

my $section_indent = '  ';

unless (@ARGV) {
  print initidy( input => \*STDIN, filename => '-' );

} else {
  for my $file ( grep -f, @ARGV ) {

    unless ( open INPUT, "< $file" ) {
      warn "warning: skipping as could not read: errno=$!, file=$file\n";
      next;
    }
    my $output = initidy( input => \*INPUT, filename => $file );
    close INPUT;

    unless ( open OUTPUT, "> $file" ) {
      warn "warning: skipping as could not write: errno=$!, file=$file\n";
      next;
    }
    print OUTPUT $output;
    close OUTPUT
     or warn "warning: problem closing file: errno=$!, file=$file\n";
  }
}

sub initidy {
  my %param = @_;
  my $fh    = $param{input};

  my @lines;
  my $default       = 1;
  my $previous_type = q{};
  my $output        = q{};

  while (<$fh>) {
    s/^\s+//;
    s/\s+$//;

    my %data;

    if (m/^ \[ ([^\]]+) \] $/x) {
      $data{type}  = 'section';
      $data{lines} = [$1];

      if ( $previous_type eq $data{type} ) {
        # TODO error if empty configuration block?
      }

      # disable as in a block now
      $default = 0;

    } elsif (m/^$/x) {
      $data{type} = 'blank';

      if ( $previous_type eq $data{type} ) {
        $lines[-1]->{count}++;
        next;
      } else {
        $data{count} = 1;
      }

    } elsif (m/^ ($comment_char_re) (.*) $/x) {
      $data{comment_str} = "$1 ";

      my $line = $2 || q{};
      $line =~ s/^\s+//;

      $data{type}   = 'comment';
      $data{indent} = $default ? q{} : $section_indent;

      if ( $line =~ m/ \[ [^\]]+ \] /x ) {
        $data{indent} = q{};
      }

      if ( $previous_type eq $data{type} ) {
        push @{ $lines[-1]->{lines} }, $line;
        next;
      } else {
        $data{lines} = [$line];
      }

    } elsif (m/=/) {
      $data{type}   = 'statement';
      $data{indent} = $default ? q{} : $section_indent;

      my ( $key, $value ) = split /\s*=\s*/, $_, 2;

      if ( $previous_type eq $data{type} ) {
        push @{ $lines[-1]->{lines} }, { key => $key, value => $value };
        $lines[-1]->{keylength} = length $key
         if length $key > $lines[-1]->{keylength};
        next;
      } else {
        $data{lines} = [ { key => $key, value => $value } ];
        $data{keylength} = length $key;
      }

    } else {
      die "error: ini parse error: file=$param{filename}, line=$.\n";
    }

    push @lines, \%data;
    $previous_type = $data{type};
  }

  #use Data::Dumper; warn Dumper \@lines;
  #exit;

  # walk over in-memory representation of configuration and write out tidy
  for my $i ( 0 .. $#lines ) {
    my $entry  = $lines[$i];
    my $indent = $entry->{indent} || q{};

    if ( $entry->{type} eq 'section' ) {
      $output .= "[$entry->{lines}->[0]]\n";
    } elsif ( $entry->{type} eq 'comment' ) {

      # no indent pre-section comments
      if ( $i != $#lines and $lines[ $i + 1 ]->{type} eq 'section' ) {
        $indent = q{};
      }

      my $comment_str = $entry->{comment_str} || '# ';

      my $comment = $indent . $comment_str . join "\n$indent$comment_str",
       @{ $entry->{lines} };

      if ( $comment =~ m/ \[ [^\]]+ \] /x or $comment =~ m/ [\w-]+ \s* = /x ) {
        $output .= $comment . "\n";
      } else {
        $output .= autoformat $comment, { all => 1 }
      }

    } elsif ( $entry->{type} eq 'blank' ) {
      # gobble blank line runs by default
      $output .= "\n" unless $i == $#lines;

    } elsif ( $entry->{type} eq 'statement' ) {
      for
       my $statement ( sort { $a->{key} cmp $b->{key} } @{ $entry->{lines} } ) {
        $output .= $indent
         . $statement->{key}
         . ' ' x ( 1 + $entry->{keylength} - length $statement->{key} ) . '= '
         . $statement->{value} . "\n";
      }
    }
  }

  return $output;
}
