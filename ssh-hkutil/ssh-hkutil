#!/usr/bin/perl -w
#
# $Id$
#
# The author disclaims all copyrights and releases this script into the
# public domain.
#
# Utility to manage and maintain OpenSSH known_hosts data.

use strict;
use Fatal qw(open close);

#use Getopt::Std;
#my %opts;
#getopts '', \%opts;

my $khf = shift;

open my $file, "< $khf";
my $hkd   = parse_known_hosts($file);
my $m_hkd = merge_host_keys($hkd);

sub print_known_hosts {
  my $hkd = shift;
}

# takes hostname => public_key hash reference, returns new hash
# reference with hostnames merged on identical public keys
sub merge_host_keys {
  my $hkd = shift;

  my ( %keys2hosts, @host_keys );

  for my $hkr (@$hkd) {
    push @{ $keys2hosts{"$hkr->{key_type} $hkr->{public_key}"} },
     @{ $hkr->{'hosts'} };
  }

  for my $key ( keys %keys2hosts ) {
    my ( $key_type, $public_key ) = split ' ', $key;
    push @host_keys,
     {
      key_type   => $key_type,
      public_key => $public_key,
      hosts      => \@{ $keys2hosts{$key} }
     };
  }

  return \@host_keys;
}

# parses OpenSSH known_hosts file into hostname => public key hash
# reference
sub parse_known_hosts {
  my $what = shift;

  my @host_keys;

  # by filehandle
  if ( ref $what eq 'GLOB' ) {
    while (<$what>) {
      next if /^#/;
      chomp;
      my ( $host_spec, $key_type, $public_key ) = split ' ', $_, 3;
      next unless $host_spec and $key_type and $public_key;

      push @host_keys,
       {
        key_type   => $key_type,
        public_key => $public_key,
        hosts      => [ split ',', $host_spec ]
       };
    }
  } else {
    die "error: do not know how to parse known_hosts from ", ref $what;
  }

  return \@host_keys;
}
