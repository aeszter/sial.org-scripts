#!/usr/bin/perl -w
#
# $Id$
#
# The author disclaims all copyrights and releases this script into the
# public domain.
#
# Interacts with pastebot sites:
# http://sourceforge.net/projects/pastebot/
#
# Run perldoc(1) on this file for additional documentation.

require 5;
use strict;

use File::Basename;
use File::Path;

use URI;

# where preference files are stored
my %pfiles = (servers => '~/.pbotutil/servers');

my $prefs_updated = 0;

# action table
my %actions = (
  get => {
    description => 'Download pastes from pastebot site',
    handle      => \&pb_get,
  },
  put => {
    description => 'Paste to pastebot site',
    handle      => \&pb_put,
  },
  up => {
    description => 'Obtain channel data from pastebot site',
    handle      => \&pb_update,
  },
);

my $VERSION;
($VERSION = '$Revision$ ') =~ s/[^0-9.]//g;

######################################################################
#
# MAIN

# parse command-line options
use Getopt::Std;
my %opts;
getopts('h?qu:s:c:m:', \%opts);
help() if exists $opts{'h'} or exists $opts{'?'};

for (keys %pfiles) {
  $pfiles{$_} = tilde_expand($pfiles{$_});

  # create prefs files automagcially
  unless (-e $pfiles{$_}) {
    remark('info', "creating preference file: $pfiles{$_}");
    mkpath(dirname($pfiles{$_}));
    open FILE, ">$pfiles{$_}"
     or remark('alert', "could not create preference file $pfiles{$_}: $!")
     and exit 100;

    if ($_ eq 'servers') {
      print FILE <<"SERVERDEFAULT";
# irc.freenode.net, #perl
name perl
url http://dragon.cbi.tamucc.edu:8080/
channel #perl

# benchwarmer (backup) pastebot for #perl
name altperl
url http://sial.org:8888/
channel #perl
SERVERDEFAULT
    }

    close FILE;
  }
}

# having no servers may or may not be a good thing
# TODO locking on the prefs file or somthing
my $servers = server_load({filename => $pfiles{servers}});

# figure out what to do
my $verb;
if (defined $ARGV[0] and ($ARGV[0] eq "get" or $ARGV[0] eq "put")) {
  $verb = shift;
} else {
  $verb = 'put';
}
unless (exists $actions{$verb}) {
  remark('alert', "no such action: $verb") and exit 101;
}
$actions{$verb}->{handle}->(@ARGV);

# TODO this probably needs locking in conjunction with reading above
if ($prefs_updated) {
  server_save({filename => $pfiles{servers}, data => $servers});
}

exit;

######################################################################
#
# SUBROUTINES

sub pb_get {
  my $id = shift;
  my ($url, $content);

  # look for server alias + paste id, or fully qualified URL to nab
  if (exists $opts{s}) {
    unless (exists $servers->{$opts{s}}) {
      remark('alert', "no server entry for: $opts{s}");
      exit 105;

    } else {
      $url =
       URI->new($servers->{$opts{s}}->{url}
         . (($servers->{$opts{s}}->{url} !~ m,/$,) ? '/' : '')
         . $id)->canonical;
    }
  } else {
    $url = URI->new($id)->canonical;
  }

  unless (defined $url) {
    remark('alert', "could not determine url for: $id");
    exit 102;
  }
  $content = get_url({url => $url});

  if ($content) {
    eval { require HTML::TokeParser; };
    if ($@) {
      remark('alert', "problem loading HTML::TokeParser: $@");

      #print $$content, "\n";
      exit 103;
    } else {
      require HTML::TokeParser;
      my $p = HTML::TokeParser->new($content);

      # TODO pull out "From" and "Summary" data if wanted?

      # look for stuff in <pre> and evict HTML crap
      $p->get_tag('pre');

      # TODO option to dump to file named after id, instead of just stdout
      print $p->get_text('/pre'), "\n";
    }
  }
}

sub pb_put {
  my ($url, $channel, $nick, $summary, $paste);

  # either use pb server name, or a fully qualified url
  if (exists $opts{s}) {
    unless (exists $servers->{$opts{s}}) {
      remark('alert', "no server entry for: $opts{s}");
      exit 105;
    } else {
      my $server = $servers->{$opts{s}};

      $url =
       URI->new(
        $server->{url} . (($server->{url} !~ m,/$,) ? '/' : '') . 'paste')
       ->canonical;

      $nick    = $server->{nick}    if exists $server->{nick};
      $channel = $server->{channel} if exists $server->{channel};
    }
  } else {
    my $tmpurl = shift || help();
    $url =
     URI->new($tmpurl . (($tmpurl !~ m,/$,) ? '/' : '') . 'paste')->canonical;
  }

  $nick    = $opts{u} if exists $opts{u};
  $channel = $opts{c} if exists $opts{c};
  $summary = $opts{m} if exists $opts{m};

  # also need to pull args from after the put verb, which take precedence
  my %putopts;
  getopts('c:m:u:', \%putopts);
  $nick    = $putopts{u} if exists $putopts{u};
  $summary = $putopts{m} if exists $putopts{m};
  $channel = $putopts{c} if exists $putopts{c};

  unless (defined $url) {
    remark('alert', 'could not determine url');
    exit 104;
  }

  if (defined $channel) {

    # KLUGE add # to front of channel, as # and some shells disagree
    $channel =~ s/^/#/ if $channel ne '' and $channel !~ /^#/;
  } else {

    #    remark('warning', 'no channel specified, using null channel');
    $channel = '';
  }

  $paste = do { local $/; <> };
  unless (defined $paste) {
    remark('notice', 'nothing to paste, quitting');
    exit 105;
  }

  # TODO merge this check with other eval for get routine/create global
  # for a LWP object if required?  Also option to support other things
  # if LWP not available might be nice.
  eval { require LWP::UserAgent; };
  if ($@) {
    remark('alert', "problem loading LWP::UserAgent: $@");
    exit 102;
  } else {
    require LWP::UserAgent;
    my $ua =
     LWP::UserAgent->new(env_proxy => 1, keep_alive => 0, timeout => 17);

    my $response = $ua->post(
      $url,
      {
        channel => $channel,
        (defined $nick) ? (nick => $nick) : (),
        (defined $summary) ? (summary => $summary) : (), paste => $paste
      }
    );

    if ($response->is_success) {
      if ($response->content and not exists $opts{q}) {
        eval { require HTML::TokeParser; };
        if ($@) {
          remark('alert', "problem loading HTML::TokeParser: $@");

          #print $$content, "\n";
          exit 103;
        } else {
          require HTML::TokeParser;
          my $p = HTML::TokeParser->new(\$response->content);

          # look for paste URL, print for user
          $p->get_tag('a');
          print $p->get_text('/a'), "\n";
        }
      }
    } else {
      if ($response->is_error) {
        my $error;
        ($error) = $response->error_as_HTML =~ /^(\d{3}.+)/m;
        remark('warning', "error posting to $url: $error");
      } else {
        remark('warning', "error posting to $url: unknown error");
      }
    }
  }
}

sub pb_update {
  die "patches welcome\n";

  # TODO visit site, add list of channels to $servers data? would allow
  # local warning about "no such channel" before flinging data at a
  # pastebot, or something...
}

# accepts hash containing url to get plus other stuff
# returns scalar reference with page content, or undef if problem
sub get_url {
  my $data = shift;

  # TODO support faster things, like HTTP::GHTTP here, or maybe fall
  # back to command line utils if nothing installed CPAN-wise
  eval { require LWP::UserAgent; };
  if ($@) {
    remark('alert', "problem loading LWP::UserAgent: $@");
    exit 102;
  } else {
    require LWP::UserAgent;
    my $ua =
     LWP::UserAgent->new(env_proxy => 1, keep_alive => 0, timeout => 17);
    my $response = $ua->get($data->{url});

    unless ($response->is_success) {
      if ($response->is_error) {
        my $error;
        ($error) = $response->error_as_HTML =~ /^(\d{3}.+)/m;
        remark('warning', "error fetching $data->{url}: $error");
        return;
      } else {
        remark('warning', "error fetching $data->{url}: unknown error");
        return;
      }
    }
    return \$response->content();
  }
}

# pulls prefs file off disk or something like that
sub server_load {
  my $data = shift;
  my (@tmp, $servers);

  push @tmp, {};

  open FILE, $data->{filename}
   or remark('alert', "could not open $data->{filename} for reading: $!")
   and exit 100;

  while (<FILE>) {
    chomp;
    s/^\s+//;
    next if /^#/;

    # treat blank lines as record seperators, if have enough to work with
    if (/^$/ and exists $tmp[-1]->{url}) {
      push @tmp, {};
      next;
    }

    s/\s+$//;

    my ($k, $v) = split /\s+/, $_, 2;
    if (defined $k and defined $v) {
      $tmp[-1]->{$k} = $v;
    } elsif (defined $k and defined URI->new($k)) {

      # convert plain URL into our data format
      push @tmp, {};
      $tmp[-1]->{url} = $k;
      push @tmp, {};
    }
  }
  close FILE;

  for my $server (@tmp) {
    next unless keys %{$server};

    unless (exists $server->{url}) {
      remark('warning', 'no url found: skipping preference data');

      #use Data::Dumper; print Dumper $server;  # DBG
      next;
    }

    unless (exists $server->{name}) {

      # create an abbreviation from URL, use as "name" value until
      # human picks a better one for us
      $server->{name} = URI->new($server->{url})->host_port;

      $prefs_updated = 1;
    }

    if (exists $servers->{$server->{name}}) {
      remark('warning',
        "duplicate server name $server->{name}: skipping new data");
      $prefs_updated = 1;
      next;
    }

    $servers->{$server->{name}} = $server;
  }

  return $servers;
}

# saves pastebot server data
sub server_save {
  my $data = shift;

  open FILE, ">$data->{filename}"
   or remark('alert', "could not open for writing: $!")
   and exit 100;

  for my $name (sort keys %{$data->{data}}) {
    my $server = $data->{data}->{$name};
    for (sort keys %$server) {
      print FILE $_, "\t", $server->{$_}, "\n";
    }
    print FILE "\n";
  }

  close FILE
   or remark('alert', "problem saving to $data->{filename}: $!")
   and exit 100;
}

# expands ~username syntax to full home directory path
sub tilde_expand {
  my @tmp;
  for (@_) {
    s{^ ~      # leading tilde
      ([^/]*)  # preserve following data
     }{
      $1 ? (getpwnam($1))[7] : ( $ENV{HOME} || $ENV{LOGDIR} )
     }ex;
  }
  return wantarray ? @_ : "@_";
}

# generic message handler
sub remark {
  my ($facility, $priority, $message);
  $facility = 'user';

  if (@_ > 1) {
    $priority = shift;
    $message  = "@_";
  } else {
    $priority = 'info';
    $message  = "@_";
  }

  return 1 if exists $opts{'q'} and $priority eq 'info';

  warn $priority, ": ", $message, "\n";

  return 1;
}

# a generic help blarb
sub help {
  print <<"HELP";
Usage for version $VERSION.

  Download (to stdout):

$0 -s shortcut get pasteid

  Upload (from files or stdin).  Shortcut is name field from
  a server preferences file entry.

$0 -s shortcut [-c channel] [-m summary] [-u nick] [files]

  Run perldoc(1) on this script for additional documentation, and also
  see the preferences file: $pfiles{servers}

HELP
  exit;
}

######################################################################
#
# DOCUMENTATION

=head1 NAME

pbotutil - interacts with pastebot sites

=head1 SYNOPSIS

Get post number 1 using the "perl" shortcut, save to "file":

  $ pbotutil -s perl get 1 > file

Post contents of "file" to the #linux channel available on the same
server that is referenced by the "perl" shortcut.

  $ pbotutil -s perl -c linux -u mynick file

See L<"FILES"> for details on the preferences file, where shortcuts
are defined.

=head1 DESCRIPTION

=head2 Overview

Provides a command line interface to pastebot sites offered by various
IRC channels to prevent paste floods.  Methods to upload files to
pastebots or download specific entries are provided, to spare command
line junkies the trouble of copying and pasting into a browser.

For more information on pastebots, see:

http://sourceforge.net/projects/pastebot/

=head2 Normal Usage

  $ pbotutil [global-options] action [args]

The C<action> can be one of get or put at present.  The put verb is the
default option, and will be assumed if left out.

=over 4

=item B<get>

The get verb accepts two mutually exclusive formats: a shortcut lookup
plus a pasteid (number) or a fully qualified URL to download.

  $ pbotutil -s shortcut get pasteid

  $ pbotutil get URL

Output will be sent to stdout by default.

=item B<put> (default)

Like get, put accepts two formats, either a shortcut lookup or a URL of
a pastebot intro page to post to.  The text "put" is optional, and will
be assumed if left out.  If multiple files are specified on the command
line, they will be joined together and then pasted.  Otherwise, input
will be read from stdin.

The paste URL will be returned to stdout, unless the quiet mode is on.

  $ pbotutil -s shortcut [-c channel] [-m summary] [-u nick] \
   [put] [-c channel] [-m summary] [-u nick] [files]

  $ pbotutil [-c channel] [-m summary] [-u nick] \
   [put] URL [-c channel] [-m summary] [-u nick] [files]

The -s and the URL arguments are exclusive, though one is required to
obtain a pastebot URL to talk to.  Some options appear on either side of
the optional put verb: options after the verb (if specified) override
those before the verb, and command line options trump any server
preference settings.

This allows shell aliases to be created while still offering the ability
to override the defaults, to avoid obvious social blunders.

  $ alias pbup='pbotutil -s perl -u perlguru put'
  $ pbup -c python -u pythonguru foo.py

=back

=head1 OPTIONS

This script currently supports the following command line switches:

=over 4

=item B<-h>, B<-?>

Prints a brief usage note.

=item B<-q>

Makes the script less chatty about various things.

=item B<-s> I<shortcut>

Use a I<shortcut> definition to get the URL, default nickname, and other
details from the preference file.  Optional, as the get and put commands
accept fully qualified URL, though recommended to simplify useage.

See L<"FILES"> for details on the preference file format.

=item B<-c> I<channel>

Channel the pastebot should send the "new paste" notice to.  Overrides
preference file setting, if any.  Setting it to an empty string will
target the "null" channel, which avoids channel announcements; this good
for testing.

  $ date | pbotutil -s test -c ''

=item B<-u> I<nick>

Use I<nick> as username when posting.  Will override the preference file
setting, if any.  This allows channel members to associate a paste with
your nick.

=item B<-m> I<summary>

Short, descriptive summary about the data being pasted.  This does not
include things like "help!"  For more details on asking questions, see:

http://www.catb.org/~esr/faqs/smart-questions.html

=back

=head1 FILES

A preferences file is used to store server definitions.  This may either
be a list of pastebot urls, which will be expanded out and given short
names, or a list of key/value blocks representing pastebot servers.

  # easy reference to perl
  name     perl
  url      http://example.org:8080
  nick     yournick
  channel  #perl

  # ditto linux
  name     linux
  url      http://example.org:8080
  nick     yournick
  channel  #linux

  # for testing this script, no channel -> null channel by default
  name     test
  url      http://example.org:8080
  nick     testing

  # nick and channel are optional, though highly recommended
  name     other
  url      http://example.net:8888/

The name field is for the -s option, and provides easy reference to a
particular server (and optionally channel or nick, as the same server
can be referenced with different names).  The channel and nick provide
defaults to use, though will be overridden by the appropriate command
line options.

The preference file will be created automagically if it cannot be found.

=head1 EXAMPLES

The script can be used on the command line, or called from an IRC
program.  For instance, the following allows one to type or paste input
into the terminal for upload.

  /exec gnome-terminal -e "pastebot -s perl -m '&2' put"

Consult your IRC program's manual for more details on how to
invoke scripts.

=head1 DIAGNOSTICS

There are magic number exit codes.  See source.  :)

=head1 BUGS

=head2 Reporting Bugs

Newer versions of this script may be available from:

http://sial.org/code/perl/

If the bug is in the latest version, send a report to the author.
Patches that fix problems or add new features are welcome.

=head2 Known Issues

Yes.  See TODO in source, etc.  New code, still being worked on.

=head1 TODO

Lots.

=head1 SEE ALSO

perl(1)

=head1 AUTHOR

Jeremy Mates, http://sial.org/contact/

Patches, examples from evilgwynie of #perl on irc.freenode.net.

=head1 COPYRIGHT

The author disclaims all copyrights and releases this script into the
public domain.

=head1 VERSION

  $Id$

=cut

