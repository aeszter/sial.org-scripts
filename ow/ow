#!/usr/bin/perl -w
#
# $Id$
#
# The author disclaims all copyrights and releases this script into
# the public domain.
#
# Integrates command line with OmniWeb shortcuts.

use Data::Dumper;

use Cwd;
use File::Basename;
use File::Path;
#use File::Spec;
use Getopt::Std;  # command line option processing

use URI;
use YAML ();

my (%opts);

my %pfiles = (
  shortcuts => '~/.ow/shortcuts',
  homepage  => '~/.ow/homepage',
  dirmap   => '~/.ow/dirmap',
);

my $scuts;

# sanity checks on preferences area, if needed
for (keys %pfiles) {
  $pfiles{$_} = tilde_expand($pfiles{$_});
  my $dir = dirname $pfiles{$_};
  unless (-e $dir) {
    eval { mkpath($dir); };
    if ($@) {
      warn "warning: could not create $dir: $@\n";
    }
  }
}

unless (-e $pfiles{shortcuts}) {
  $scuts = omniweb2sc();
} else {
  # TODO check if OW prefs more recent than our config file, or
  # have the user manually update in such cases?

  $scuts = YAML::LoadFile($pfiles{shortcuts});
}

# parse command-line options
getopts('d', \%opts);

# TODO have a "list" mode to show shortcuts, where they map too

# TODO means to write new shortcuts back to OmniWeb prefs file?

# what to launch URLs with
my @open = qw(open);

# -d flag does directory->web map lookup (if possible)
if (exists $opts{d}) {
  my $dir = getcwd;
  my $dirmap = YAML::LoadFile($pfiles{dirmap});

# longest first, so subdirs can override parent
for (sort { length $b <=> length $a } keys %$dirmap) {
  my $pos = index $dir, $_;
  if ($pos > -1) {
    my $frag = substr $dir, $pos + length $_;
    $frag =~ s,^/+,, if $dirmap->{$_} =~ m,\Q/%@,;
    visit(expand($dirmap->{$_}, $frag));
  }
}

}

if (@ARGV == 0) {

# TODO put this in the to-be-written ow-sync program :)
#  eval { require XML::XPath; };
#  unless ($@) {
#    require XML::XPath;
#  } else {
#    die "error: could not load XML::XPath to parse omniweb preferences\n";
#  }
#
#  my $f = $ENV{HOME} . "/Library/Preferences/com.apple.internetconfig.plist";
#  my $x = XML::XPath->new(filename => $f);
#
#  # find WWWHomePage entry
#  # TODO fix // search, which is slow.  or cache the entry somewhere for
#  # faster lookup?
#  my @sn =
#   $x->find('//dict[preceding::key="WWWHomePage"]/string')->get_nodelist;
#  my $homepage = $sn[0]->string_value;

  open HP, $pfiles{homepage} or die "error: could not open $pfiles{homepage}: $!\n";
  $homepage = <HP>;

  die "no homepage specified\n" unless $homepage;

  visit($homepage);

} elsif (@ARGV == 1) {
  if (exists $scuts->{$ARGV[0]}) {

    # assume vanilla shortcuts are urls...
    visit($scuts->{$ARGV[0]});

  } elsif ($ARGV[0] =~ m(^\w+://.)) {
    # TODO attempt a URI module parsing, and only pass if URI groks it?
    # visit url-ish resources directly
    visit($ARGV[0]);

  } elsif ($ARGV[0] =~ m/\./) {

    visit('http://' . $ARGV[0]);

  } elsif (exists $scuts->{'*'}) {

    # use OmniWeb * shortcut
    visit(expand($scuts->{'*'}, $ARGV[0]));

  } else {
    die "not sure what to do with: $ARGV[0]\n";
  }
} else {
  my $key = shift;

  # OmniWeb shortcuts with parameters have a trailing @ on them...
  $key .= '@';

  # TODO check if two args whether second is actually a http:// URL,
  # which should get fed to direct lookup instead of google search
  # perhaps?
  if (exists $scuts->{$key}) {
    visit(expand($scuts->{$key}, join '+', @ARGV));
  } else {
    die "no such shortcut: $key\n";
  }
}

# takes OmniWeb URL pattern "http://www.%@.com/" and a scalar to insert
# into said pattern.  Returns expanded string.
sub expand {
  my $pattern = shift;
  my $string  = "@_";

  # catch @ where no %@, usually indicates user input mistake
  warn "nothing to expand on in $pattern" unless $pattern =~ /\Q%@/;

  $pattern =~ s/\Q%@/$string/g;
  return $pattern;
}

# expects URL to visit, handles lanuching what OS needs.
sub visit {
  my $url = URI->new(shift)->canonical;
  die "could not parse URL from $url" unless $url;
  exec @open, $url;
}

sub tilde_expand {
  my @tmp;
  for (@_) {
    s{^ ~      # leading tilde
      ([^/]*)  # preserve following data
     }{
      $1 ? (getpwnam($1))[7] : ( $ENV{HOME} || $ENV{LOGDIR} )
     }ex;
  }
  return wantarray ? @_ : "@_";
}

sub omniweb2sc {
  my $f = $ENV{HOME} . "/Library/Preferences/com.omnigroup.OmniWeb.plist";

  eval { require XML::XPath; };
  unless ($@) {
    require XML::XPath;
  } else {
    die "error: could not load XML::XPath to parse omniweb preferences\n";
  }
  
  my $x = XML::XPath->new(filename => $f);
  
  # we need the key/string text nodes under the dict element following a
  # key whose value is OWAddressShortcuts
  my @kn =
   $x->find('/plist/dict/dict[preceding::key="OWAddressShortcuts"]/key')
   ->get_nodelist;
  die "error: could not extract any OWAddressShortcuts keys" unless @kn;
  
  my @sn =
   $x->find('/plist/dict/dict[preceding::key="OWAddressShortcuts"]/string')
   ->get_nodelist;
  
  my %hash;
  @hash{map { $_->string_value } @kn} = map { $_->string_value } @sn;
  
  YAML::DumpFile($pfiles{shortcuts}, \%hash);
  
  return \%hash;
}
