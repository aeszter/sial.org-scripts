#!/usr/bin/perl

# $Id$

# Demonstration script showing how File::Size (or whatever it ends up
# being called) would work to humanize output file sizes...

######################################################################
#
# CONSTANTS
#
# All constants held in global hash, which can be overridden when
# calling the humanize routine.

my %global_prefs = (
	     # include decimals in output? (e.g. 25.8 K vs. 26 K)
	     'decimal' => 1,
	     # include .0 in decmail output?
	     'decimal_zero' => 1,
	     # what to divide file sizes down by
	     'factor' => 1024,
	     # percentage above which will be bumped up
	     # (e.g. 999 bytes -> 1 K as within 5% of 1024)
	     # set to undef to turn off
	     'fudge' => 0.95,
	     # lengths above which decimals will not be included
	     # for better readability
	     'max_human_length' => 2,
	     # list of suffixes for human readable output
	     'suffix' => [ '', ' K', ' M', ' G', ' P', ' E', ' Z', ' Y' ],
	     );

# note all these numbers are presumed to represent bytes; could add
# optional pref to specify a conversion factor to deal with incoming
# blocks or KB values (i.e. convert to bytes, then run humanization)
print humanize($ARGV[0]);
print humanize(-56990456345), "\n";
print humanize(0), "\n";
print humanize(500), "\n";
print humanize(1023, 'fudge' => undef), "\n";
print humanize(1023), "\n";
print humanize(8700), "\n";
print humanize(8900), "\n";
print humanize(999999), "\n";
print humanize(1048500), "\n";
print humanize(26223559), "\n";
print humanize(133456345), "\n";
print humanize(56990456345), "\n";

# Inspired from GNU's df -h output, which fixes 133456345 bytes
# to be something human readable.
#
# takes a number, returns formatted string.  Also takes optional
# hash containing various defaults that affect output style.
sub humanize {
    my $num = shift; # could also take a array ref or hash ref to parse thru?
    my %prefs = @_;

    # inherit global prefs, but give preference to user supplied ones
    unless (keys %prefs) {
	%prefs = %global_prefs;
    } else {
	# benchmarking w/ 5.6.0 on Linux PPC & i386 showed this next
	# faster than direct merge method (p. 145 Perl Cookbook)
	while (my ($k, $v) = each (%global_prefs)) {
	    $prefs{$k} = $v unless exists $prefs{$k};
	}
    }

    # some local working variables
    my $count = 0;
    my $prefix = '';
    my $tmp = '';

    # handle negatives
    if ($num < 0 ) {
	$num = abs $num;
	$prefix = '-';
    }
    
    # reduce number to something readable by factor specified	
    while ($num > $prefs{'factor'}) {
	$num /= $prefs{'factor'};
	$count++;
    }
    
    # optionally fudge "near" values up to next higher level
    if(defined $prefs{'fudge'}) {
	if ($num > ($prefs{'fudge'} * $prefs{'factor'})) {
	    $count++;
	    $num /= $prefs{'factor'};
	}
    }
    
    # no .[1-9] decimal on longer numbers for easier reading
    # only show decimal if prefs say so
    if (length sprintf("%.f", $num) > $prefs{'max_human_length'} || 
	! $prefs{'decimal'}) {

	$tmp = sprintf("%.0f", $num);

    } else {
	$tmp = sprintf("%.1f", $num);
	
	# optionally hack trailing .0 as is not needed
	$tmp =~ s/\.0$// unless $prefs{'decimal_zero'};
    }
    
    # return number with proper style applied
    return $prefix . $tmp . $prefs{'suffix'}->[$count];
}

__END__

# some perldoc so my 2website script doesn't complain :)
=head1 NAME

human.pl - demonstrates humanization of file sizes.

=cut
