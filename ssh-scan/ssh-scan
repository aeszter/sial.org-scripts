#!/usr/bin/perl -w
#
# $Id$
#
# Copyright (c) 2001, Jeremy A. Mates.  This script is free software;
# you can redistribute it and/or modify it under the same terms as
# Perl itself.
#
# Run perldoc(1) on this file for additional documentation.
#
######################################################################
#
# REQUIREMENTS

require 5.005;

use strict;

######################################################################
#
# MODULES

use Carp;			# better error reporting
use Getopt::Std;		# command line option processing

eval { require Net::Telnet; };
if ($@) {
    die "Net::Telnet is not installed; please install it from CPAN.\n";
} else {
    require Net::Telnet;
}

######################################################################
#
# VARIABLES

my $VERSION; ($VERSION = '$Revision$ ') =~ s/[^0-9.]//g;

my (%opts);

######################################################################
#
# MAIN

# parse command-line options
getopts('h?', \%opts);

help() if exists $opts{'h'} or exists $opts{'?'};

# do nmap with supplied arguments
open (NMAP, "nmap -sS -p 22 -oM - @ARGV |") 
    or die "Couldn't call nmap: $!\n";

while (<NMAP>) {
    # skip non-open/non-relevant data
    next unless m!22/open/tcp!;

    # extract ip and hostname from matching lines
    my ($ip, $hostname) = $_ =~ /Host: (\S+) \(([^\(]+)?\)/;

    $hostname = "UNKNOWN" unless $hostname;

    next unless $ip;

    # nab reply from SSH server and move on...
    my $t = Net::Telnet->new(Timeout => 3, Port => 22);
    $t->open($ip);

    # probably a better way to do this :)
    my $status;

    eval {
	$status = $t->get();
    };

    if ($@) {
	$status = "TIMEOUT\n";
    }

    $status = "UNKNOWN\n" unless $status;

    print "$ip\t$hostname\t";
    print $status;
    $t->close;
}

close (NMAP);

exit;

######################################################################
#
# SUBROUTINES

# a generic help blarb
sub help {
    print <<"HELP";
Usage: $0 <host or net #1 ... [#N]>

See nmap(1) for details on the host or net specifications allowed.

Options for version $VERSION:
  -h/-?  Display this message

Run perldoc(1) on this script for additional documentation.

HELP
    exit;
}

######################################################################
#
# DOCUMENTATION

=head1 NAME

ssh_scan.pl - a script to map SSH servers

=head1 SYNOPSIS

This script accepts nmap target specifications as arguments:

  $ ssh_scan.pl 192.168.0.1-254 gateway.example.org

=head1 DESCRIPTION

Uses nmap to scan the specified targets for SSH servers, then calls
Net::Telnet to figure out what SSH server open SSH servers are
running.

=head2 Normal Usage

  $ ssh_scan.pl <host or net #1 ... [#N]>

See nmap(1) for details on the host or netmasks supported under TARGET
SPECIFICATION.

=head1 OPTIONS

This script currently supports the following command line switches:

=over 4

=item B<-h>, B<-?>

Prints a brief usage note about the script.

=back

=head1 BUGS

Newer versions of this script may be available from:

http://www.sial.org/code/perl/

If not, or the bug is in the latest version, send the bug report to:

jmates@sial.org

=head1 SEE ALSO

nmap(1), L<Net::Telnet>, perl(1)

=head1 AUTHOR

Jeremy A. Mates, jmates@sial.org

=head1 COPYRIGHT

Copyright (c) 2001, Jeremy A. Mates.  This script is free software;
you can redistribute it and/or modify it under the same terms as Perl
itself.

=head1 VERSION

$Id$

=cut
