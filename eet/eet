#!/usr/bin/perl -w
#
# $Id$
#
# Copyright (c) 2001, Jeremy A. Mates.  This script is free software;
# you can redistribute it and/or modify it under the same terms as
# Perl itself.
#
# Run perldoc(1) on this file for additional documentation.
#
######################################################################
#
# REQUIREMENTS

require 5;

use strict;

######################################################################
#
# MODULES

use Carp;			# better error reporting
use Getopt::Std;		# command line option processing

use File::Tail 0.91;		# tail -f on steroids

######################################################################
#
# VARIABLES

my $VERSION;
($VERSION = '$Revision$ ') =~ s/[^0-9.]//g;

my (%opts, @files);

# various File::Tail object preferences.  listen much faster than default
# to emulate tail(1) at expense of more busy wait.
my $maxinterval = 2;
my $interval = 1;
my $adjustafter = 1;
my $tail = 0;
my $reset_tail = -1;

######################################################################
#
# MAIN

# parse command-line options
getopts('h?', \%opts);

help() if exists $opts{'h'} or exists $opts{'?'};

$maxinterval = $opts{'m'} if exists $opts{'m'} and $opts{'m'} =~ /^\d+$/;
$interval =    $opts{'i'} if exists $opts{'i'} and $opts{'i'} =~ /^\d+$/;
$adjustafter = $opts{'a'} if exists $opts{'a'} and $opts{'a'} =~ /^\d+$/;
$tail =        $opts{'t'} if exists $opts{'t'} and $opts{'t'} =~ /^-?\d+$/;
$reset_tail =  $opts{'r'} if exists $opts{'r'} and $opts{'r'} =~ /^-?\d+$/;

# read from STDIN if no args left
chomp(@ARGV = <STDIN>) unless @ARGV;

# and flag the help text if nothing from STDIN
help() unless @ARGV;

for (@ARGV) {
    push @files, File::Tail->new(
				 name=>"$_",
				 maxinterval => $maxinterval,
				 interval => $interval,
				 adjustafter => $adjustafter,
				 tail => $tail,
				 reset_tail => $reset_tail,
				 );
}

my $rin='';
my $nfound;

while (1) {
    $nfound = File::Tail::select(undef, undef, undef, 60, @files);
    unless ($nfound) {
	my @ints;
	for (@files) {
	    push @ints, $_->interval;
	}
    }
    for (@files) {
	print $_->read unless $_->predict;
    }
}

exit;

######################################################################
#
# SUBROUTINES

# a generic help blarb
sub help {
    print <<"HELP";
Usage: $0 [opts]

Help for a generic script template.

Options for version $VERSION:
  -h/-?  Display this message

Run perldoc(1) on this script for additional documentation.

HELP
    exit;
}

######################################################################
#
# DOCUMENTATION

=head1 NAME

blank.pl - a script with stub docs

=head1 SYNOPSIS

Quick usage notes here.

=head1 DESCRIPTION

=head2 Overview

Short description of what script is intended to do.

=head2 Normal Usage

  $ blank.pl [options]

See L<"OPTIONS"> for details on the command line switches supported.

=head1 OPTIONS

This script currently supports the following command line switches:

=over 4

=item B<-h>, B<-?>

Prints a brief usage note about the script.

=back

Use B<-f> I<asdf> if a switch takes an argument of some kind.

=head1 EXAMPLES

Additional examples/helpfull hints expanding on SYNOPSIS.

=head1 ENVIRONMENT

Any special environement details or warnings?

=head1 FILES

Any important files this script relies on?

=head1 BUGS

=head2 Reporting Bugs

Newer versions of this script may be available from:

http://www.sial.org/code/perl/

If the bug is in the latest version, send a report to the author.
Patches that fix problems or add new features are welcome.

=head2 Known Issues

No known bugs.

=head1 TODO

Replace default stub POD entries with real documentation.

=head1 SEE ALSO

perl(1)

=head1 AUTHOR

Jeremy A. Mates, http://www.sial.org/contact/

=head1 COPYRIGHT

Copyright (c) 2001, Jeremy A. Mates.  This script is free software;
you can redistribute it and/or modify it under the same terms as Perl
itself.

=head1 HISTORY

A blank perl template I threw together to make writing new scripts
easier.

=head1 VERSION

  $Id$

=cut
