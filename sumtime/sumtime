#!/usr/bin/perl -w
#
# $Id$
#
# The author disclaims all copyrights and releases this script into the
# public domain.
#
# Run perldoc(1) on this file for additional documentation.
#
######################################################################
#
# REQUIREMENTS

require 5;

use strict;

######################################################################
#
# MODULES

use Carp;         # better error reporting
use Getopt::Std;  # command line option processing

######################################################################
#
# VARIABLES

my $VERSION;
($VERSION = '$Revision$ ') =~ s/[^0-9.]//g;

my (%opts, $duration);

# how to convert various time units to seconds
my %factor = (
  'w' => 604800,
  'd' => 86400,
  'h' => 3600,
  'm' => 60,
  's' => 1,
);

######################################################################
#
# MAIN

# parse command-line options
getopts('h?', \%opts);

help() if exists $opts{'h'} or exists $opts{'?'};

# read from STDIN if no args left
chomp(@ARGV = <STDIN>) unless @ARGV;

# and flag the help text if nothing from STDIN
help() unless @ARGV;

for (@ARGV) {
  for (/(\d+\s*[wdhms])/g) {
    /(\d+)(\w)/;
    $duration += $1 * $factor{$2};
  }
}

warn "Basic duration: $duration\n";  #DBG
print deltatimefmt($duration), "\n";

exit;

######################################################################
#
# SUBROUTINES

sub deltatimefmt {
  my $difference = shift;
  $difference = int($difference);

  my $seconds = $difference % 60;
  $difference = ($difference - $seconds) / 60;
  my $minutes = $difference % 60;
  $difference = ($difference - $minutes) / 60;

  #  my $hours = $difference;
  my $hours = $difference % 24;
  $difference = ($difference - $hours) / 24;
  my $days  = $difference % 7;
  my $weeks = ($difference - $days) / 7;

  # better way to do this?
  my $temp = ($weeks) ? "${weeks}w " : '';
  $temp .= ($days)    ? "${days}d "    : '';
  $temp .= ($hours)   ? "${hours}h "   : '';
  $temp .= ($minutes) ? "${minutes}m " : '';
  $temp .= ($seconds) ? "${seconds}s"  : '';
  return $temp;
}

# a generic help blarb
sub help {
  print <<"HELP";
Usage: $0 [opts] [time parameters]

Script to aid in totalling up time.

Options for version $VERSION:
  -h/-?  Display this message

Run perldoc(1) on this script for additional documentation.

HELP
  exit;
}

######################################################################
#
# DOCUMENTATION

=head1 NAME

sumtime - totals up short-hand time durations

=head1 SYNOPSIS

  $ sumtime 1d 3h 5m 71s

=head1 DESCRIPTION

=head2 Overview

Short description of what script is intended to do.

=head2 Normal Usage

  $ sumtime [options]

See L<"OPTIONS"> for details on the command line switches supported.

=head1 OPTIONS

This script currently supports the following command line switches:

=over 4

=item B<-h>, B<-?>

Prints a brief usage note about the script.

=back

Use B<-f> I<asdf> if a switch takes an argument of some kind.

=head1 EXAMPLES

None yet.

=head1 BUGS

=head2 Reporting Bugs

Newer versions of this script may be available from:

http://www.sial.org/code/perl/

If the bug is in the latest version, send a report to the author.
Patches that fix problems or add new features are welcome.

=head2 Known Issues

No known bugs.

=head1 TODO

Output formatting, e.g. raw seconds, or ability to select output time
format (e.g. hours only, and so forth).  Ability to set a default
input factor, e.g. when passing in unadorned hours or minutes.

=head1 SEE ALSO

perl(1)

=head1 AUTHOR

Jeremy Mates, http://www.sial.org/contact/

=head1 COPYRIGHT

The author disclaims all copyrights and releases this script into the
public domain.

=head1 VERSION

  $Id$

=cut
