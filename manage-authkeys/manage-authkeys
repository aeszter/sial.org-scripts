#!/usr/bin/perl -wT
#
# $Id$
#
# Copyright (c) 2002, Jeremy A. Mates.  This script is free software;
# you can redistribute it and/or modify it under the same terms as
# Perl itself.
#
# Run perldoc(1) on this file for additional documentation.
#
######################################################################
#
# REQUIREMENTS

require 5;

use strict;

# clean up env for taint mode ("perldoc perlsec" for more information)
sub BEGIN {
  delete @ENV{qw(IFS CDPATH ENV BASH_ENV)};
  $ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin';
}

######################################################################
#
# MODULES

use Carp;         # better error reporting
use Getopt::Std;  # command line option processing

use Digest::MD5 qw(md5);  # Perl interface to the MD5 Algorithm

######################################################################
#
# VARIABLES

my $VERSION;
($VERSION = '$Revision$ ') =~ s/[^0-9.]//g;

my (%opts);

# path to authorized_keys file.  OpenSSH >= 3.0 should merge old
# authorized_keys2 files into authorized_keys.
my $auth_key_file = "~/.ssh/authorized_keys";

######################################################################
#
# MAIN

# parse command-line options
getopts('h?f', \%opts);

help() if exists $opts{'h'} or exists $opts{'?'};

if (exists $opts{'f'}) {
  # TODO: need to detaint/validate this input...
  $auth_key_file = $opts{'f'};
}

# do ~ expansion on filename
$auth_key_file =~ s{ ^ ~ ( [^/]* ) }
                    { $1 ? (getpwnam($1))[7]
                          : ( $ENV{HOME} || $ENV{LOGDIR}
                              || (getpwuid($>))[7]
                              )
                          }ex;

# read from STDIN if no args left
chomp(@ARGV = <STDIN>) unless @ARGV;

# and flag the help text if nothing from STDIN
help() unless @ARGV;

exit;

######################################################################
#
# SUBROUTINES

# a generic help blarb
sub help {
  print <<"HELP";
Usage: $0 [opts]

Manages an OpenSSH authorized_keys file.

Options for version $VERSION:
  -h/-?  Display this message

  -f ff  Use specified authorized_keys file.

Run perldoc(1) on this script for additional documentation.

HELP
  exit;
}

######################################################################
#
# DOCUMENTATION

=head1 NAME

ssh-authkey-manage.pl - manages an OpenSSH authorized_keys file

=head1 SYNOPSIS

Quick usage notes here.

=head1 DESCRIPTION

=head2 Overview

Provides a scriptable means of listing, altering, and deleting keys
out of an OpenSSH C<~/.ssh/authorized_keys> file.

=head2 Normal Usage

  $ ssh-authkey-manage.pl [options]

See L<"OPTIONS"> for details on the command line switches supported.

=head1 OPTIONS

This script currently supports the following command line switches:

=over 4

=item B<-h>, B<-?>

Prints a brief usage note about the script.

=item B<-f> I<auth_key_file>

Use the specified authorized_keys file instead of the default.

=back

=head1 EXAMPLES

Additional examples/helpfull hints expanding on SYNOPSIS.

=head1 ENVIRONMENT

Requires an up-to-date version of OpenSSH; ancient versions may not
have the B<-l> and B<-f> options required for ssh-keygen(1) to list
all keytypes.

Developed with OpenSSH 3.4 on Mac OS X with perl 5.8.

=head1 FILES

Any important files this script relies on?

=head1 BUGS

=head2 Reporting Bugs

Newer versions of this script may be available from:

http://www.sial.org/code/perl/

If the bug is in the latest version, send a report to the author.
Patches that fix problems or add new features are welcome.

=head2 Known Issues

No known bugs.

=head1 SEE ALSO

perl(1), ssh-keygen(1)

=head1 AUTHOR

Jeremy A. Mates, http://www.sial.org/contact/

=head1 COPYRIGHT

Copyright (c) 2002, Jeremy A. Mates.  This script is free software;
you can redistribute it and/or modify it under the same terms as Perl
itself.

=head1 VERSION

  $Id$

=cut

