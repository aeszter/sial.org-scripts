#!/usr/local/bin/perl -w
#
# $Id$
# By Jeremy Mates <mailto:jmates@sial.org>
#
# A recursive group fixer that parses a directory tree, correcting
# the group on each file to the default group of the owner.
#
# (To fix munged group permissions when certain restores-from-
# tar fail horribly...)
#
# Distributed under the Artistic License:
# http://www.sial.org/artistic_license.txt

# MODULES

use Carp;           # to die for
use File::Find;
use Getopt::Std;    # command line option handling

use strict;

# CONSTANTS

my (%opts, $verbose, %u2g, %n2u, %groups);

# MAIN

# parse command-line options
getopts('h?vp:s:g', \%opts);

help() if exists($opts{'h'}) || exists($opts{'?'});

$verbose  = 1 if exists $opts{'v'};

# read from STDIN if no args left
chomp(@ARGV = <STDIN>) unless @ARGV;

# and flag the help text if nothing from STDIN
help() unless @ARGV;

# build a lookup table of user -> default group from passwd file
while (my ($user, undef, $uid, $gid) = getpwent()) {
    $u2g{$uid} = $gid;

    # and a hash for converting group members to uid's
    $n2u{$user} = $uid;
}

# if needed, add user's membership in other groups to the list
if (exists $opts{'g'}) {
    while (my (undef, undef, $gid, $members) = getgrent()) {
	# need convert space delimited list to uid's...
	foreach (split ' ', $members) {
	    my $uid = $n2u{$_};

	    # make a hash of hashes so we can use quick lookups
	    # instead of looping over an array for each file
	    $groups{$uid}->{$gid} = 1 if defined $uid;
	}
    }
}

# loop over the remaining input, looking for dirs and parsing them
foreach ( @ARGV ) {
    unless (-d $_) {
        warn "error: $_ not a directory, skipping\n";
        next;
    }

    find(\&do_stuff, $_);
}

# SUBROUTINES

sub do_stuff {
    # get current user/group ids off of file
    my ($uid, $gid) = (lstat)[4,5];

    # see if we should "prune" this directory
    if (exists $opts{'p'} && -d) {
        my $results = eval "return 1 if( " . $opts{'p'} . " );";

        if($@) {
            chomp($@);
            die "Prune error: ", $@; # croak on errors
        }

        if($results) {
            $File::Find::prune = 1;
            return;
        }
    }

    # (try to) figure out what to skip
    if (exists $opts{'s'}) {
        my $result = eval "return 1 if( " . $opts{'s'} . " );";

        if($@) {
            chomp($@);
            die "Skip error: ", $@; # croak on errors
        }

        if($result) {
            return;
        }
    }

    # catch odd 'uninitialized value' errors I'm seeing (DBG)
    if ($verbose) {
	warn $File::Find::name, ' uid ', $uid, ' gid ', $gid, " uninitialized\n" unless defined $u2g{$uid};
    }

    # see whether gid of this file exists in our lookup hash
    if ($gid != $u2g{$uid}) {
	# and optionally whether other group is valid for the user
	if (exists $opts{'g'}) {
	    return if exists $groups{$uid}->{$gid};
	}
	print $File::Find::name, ' ', $gid, ' to ', $u2g{$uid}, "\n" if $verbose;
	
	my $result = chown $uid, $u2g{$uid}, $_;
	warn "error: chown on ", $File::Find::name, " failed\n" if $result == 0;
    }
}

sub help {
    print <<"HELP";
Usage: $0 [options] dir1 dir2 .. dirN

$0 is a recursive group fixing utility.

Options:
  -h/-?  Display this message
  -v     Show files group was changed on, and previous and new gid settings.

  -g     Do not change group to default group if user belongs to the non-
         default group the file is set to.

  -s xx  Perl expression that will result in the current item (stored in \$_)
         being skipped if the expression turns out to be "true."  Example:

         -s '-d || m/^\\.rsrc\$/' .

         Would skip applying the group change to directories or '.rsrc' files.
         (But would still traverse down into any "skipped" directories!)

  -p xx  Perl expression that will result in the current directory (stored in 
	 \$_) being pruned out of the tree, e.g. to skip dot directories:

         -p 'm/^\\../' .

	 Both -s and -p expressions should use the shortcut _ operator in
	 any stat() calls, to avoid race conditions.

HELP
    exit;
}

__END__

$Log$
Revision 1.7  2000/02/09 23:52:19  jmates
Added debugging code to catch odd uninitialized value errors I'm still seeing.

Revision 1.6  2000/02/09 23:41:40  jmates
Changed stat() to lstat() to prevent copious uninitialized value errors as null links are looked up.

Revision 1.5  2000/02/09 23:29:34  jmates
Added -g option to skip chgrp if group of file is valid for user, by parsing
the user's presence from the getgrent() call.

Fixed missing , bug in $verbose print statement.

Updated help docs.

Revision 1.4  2000/02/09 21:47:03  jmates
Added -s and -p skip/prune options for fine grained control over what files
are to be excluded.

Updated documentation to reflect new options, cleaned it up some.

Revision 1.3  2000/02/09 19:39:29  jmates
Fixed bug where -v option wasn't implemented properly.

Revision 1.2  2000/02/09 19:35:21  jmates
Added getpwent() routine to form a hash of uid -> default group info.

Added chown routine to change the group to the default if needed.

Revision 1.1  2000/02/09 18:19:08  jmates
Initial work import

