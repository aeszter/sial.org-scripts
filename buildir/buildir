#!/usr/bin/perl -w
#
# $Id$
#
# The author disclaims all copyrights and releases this script into the
# public domain.
#
# Like 'mkdir -p', but does 'cvs add' if under CVS sandboxes, or other
# extensible actions. Prints directories created when run with -p
# option, used by other tools, such as a shell function to change the
# working directory to a newly created directory:
#
# function ndir {
#   NDIR=`buildir -p $@ | tail -1`
#   [ $? -ne 0 ] && exit $?
#   builtin cd "$NDIR"
# }

use strict;

use File::Spec ();

use Getopt::Std;
my %opts;
getopts 'h?p', \%opts;

print_help() if $opts{h} or $opts{'?'} or not @ARGV;

my $start_dir = File::Spec->curdir();

for my $dir (@ARGV) {

  my @dirbits = File::Spec->splitdir($dir);
  my @seen;

  # start directory build from working directory for relative paths,
  # root directory for absolute paths
  my $parent = $start_dir;
  if ( $dirbits[0] eq '' ) {
    $parent = File::Spec->rootdir();
    shift @dirbits;
    push @seen, $parent;
  }
  chdir $parent
   or remark(
    'error',
    'could not chdir',
    { errno => $!, dir => File::Spec->catfile(@seen) }
   )
   and exit 101;

  # work through dirbits, as not all mkdir support -p, and do special
  # things under CVS and Subversion sandboxes
  #
  # KLUGE // in pathes add empty bits to the list, evict with grep
  for my $dirbit ( grep { defined and $_ ne '' } @dirbits ) {
    push @seen, $dirbit;

    next if -d $dirbit;

    if ( -f File::Spec->catfile(qw{CVS Root}) ) {
      # CVS: add dir automagically
      mkdir $dirbit
       or remark(
        'error',
        'could not create directory',
        { errno => $!, dir => File::Spec->catfile(@seen) }
       )
       and exit 102;
      system qw{cvs -Q add}, $dirbit;

    } elsif ( -f File::Spec->catfile(qw{.svn entries}) ) {
      # Subversion: use mkdir subcommand (not tested much!)
      system qw{svn mkdir}, $dirbit
       or remark(
        'error',
        'could not create directory',
        { errno => $!, dir => File::Spec->catfile(@seen), type => 'svn' }
       )
       and exit 102;

    } else {
      mkdir $dirbit
       or remark(
        'error',
        'could not create directory',
        { errno => $!, dir => File::Spec->catfile(@seen) }
       )
       and exit 102;

    }

  } continue {

    chdir $dirbit
     or remark(
      'error',
      'could not chdir',
      { errno => $!, dir => File::Spec->catfile(@seen) }
     )
     and exit 101;
  }

  print $dir, $/ if exists $opts{p};
}

sub print_help {
  print <<"HELP";
Usage: $0 [options] dir [dir2 ...]

Creates directories.

Options:
  -h/-?  Display this message.

  -p     Print directories created.

HELP
  exit 100;
}

sub remark {
  my $priority   = shift;
  my $message    = shift;
  my $attributes = shift;

  chomp $message;

  my $attr_str;
  if ($attributes) {
    $attr_str = join ', ',
     map { $attributes->{$_} ||= ''; "$_=$attributes->{$_}" }
     sort keys %$attributes;
  }

  print STDERR "$priority: $message"
   . ( $attr_str ? ": $attr_str" : '' ) . "\n";
  return 1;
}
