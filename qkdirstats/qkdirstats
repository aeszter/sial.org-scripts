#!/usr/bin/perl -w
#
# $Id$
#
# The author disclaims all copyrights and releases this script into the
# public domain.
#
# Shows quick directory statistics and other summary information.
#
# Run perldoc(1) on this script for additional documentation.

use strict;

my $timeout = 3;

use Cwd qw(getcwd);
my $pwd = getcwd;

use Text::Wrap qw(wrap);
# TODO could lookup from terminal information?
$Text::Wrap::columns = 78;

# summary information in global vars
my %keys;
my %counts;
my @overview;
my $overview_max      = 50;
my $overview_overflow = 0;

my $overview_max_lines = 5;

# TODO want to set 'readonly' key if do not have write permission in
# directory

# directory listing can hang or take far too long, so need timeouts
eval {
  local $SIG{ALRM} = sub { die "alarm timeout\n" };
  alarm $timeout;

  dirdata();

  alarm 0;
};
if ($@) {
  if ( $@ !~ /alarm timeout/ ) {
    chomp $@;
    die "error: unknown error: dir=$pwd, errno=$@\n";
  } else {
    $keys{timeout} = 1;
  }
}

exit if not @overview and not keys %keys;
output();

sub dirdata {
  opendir DIR, '.' or die "error: could not open directory: dir=$pwd\n";
  while ( $_ = readdir DIR ) {
    next if $_ eq '.' or $_ eq '..';

    my @stat = lstat;

    $counts{total}++;
    if ( -f _ ) {
      $counts{file}++;
    } elsif ( -d _ ) {
      $counts{dir}++;
    } elsif ( -l _ ) {
      $counts{link}++;
    } else {
      $counts{other}++;
    }

    if ( $_ eq 'CVS' ) {
      $keys{CVS} = 1;
      next;
    } elsif ( $_ eq '.svn' ) {
      $keys{SVN} = 1;
      next;
    }

    if ( $_ =~ m/^\./ ) {
      $keys{hidden} = 1;
      next;
    }

    if ( @overview <= $overview_max ) {
      push @overview, $_;
    } else {
      $overview_overflow = 1;
    }
  }

  $keys{empty} = 1 unless @overview;
}

sub output {
  my @metadata = sort keys %keys;
  push @metadata, map { "$_=$counts{$_}" } sort keys %counts
   unless exists $keys{empty};

  # TODO this also needs to be wrapped on lines and limited...
  if (@metadata) {
    print wrap( 'm  ', 'm  ', @metadata ) . "\n";
  }

  # TODO encode filenames, form into lines, limit number of lines to show...
  if (@overview) {
    my $output = wrap( 'f  ', 'f  ', sort @overview );
    my @lines = split /\n/, $output;
    if ( @lines >= $overview_max_lines ) {
      if ( @lines > $overview_max_lines ) {
        $lines[ $overview_max_lines - 1 ] =~ s/(\S+)$/.../;
      }
      @lines = @lines[ 0 .. $overview_max_lines - 1 ];
    }
    print join( "\n", @lines ), "\n";
  }
}
